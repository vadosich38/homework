import aiogram.types
from aiogram.types import ContentTypes
from config import API_KEY
from keyboards import get_kb, get_cancel_kb
from aiogram.dispatcher.filters import Text
from aiogram import Bot, executor, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext

my_bot = Bot(API_KEY)
my_storage = MemoryStorage()
my_disp = Dispatcher(bot=my_bot,
                     storage=my_storage)


async def on_startup(_):
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")


class MyStatesGroup(StatesGroup):
    photo = State()
    name = State()
    age = State()
    description = State()


@my_disp.message_handler(Text(equals="cancel", ignore_case=True), state="*")
async def cmd_start(message: types.Message, state: FSMContext):
    await message.reply(text="–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è",
                        reply_markup=get_kb())
    await state.finish()


@my_disp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    await message.delete()
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–æ–≤—ã–º–∏ –ª—é–¥—å–º–∏! ‚ù§Ô∏è‚Äçüî•\n\n"
                         "–î–ª—è —Å–æ–∑–¥–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É CREATE PROFILE üëá –≤–Ω–∏–∑—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "
                         "—Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É  ‚úçÔ∏è",
                         reply_markup=get_kb())


@my_disp.message_handler(Text(equals="create profile", ignore_case=True), state="*")
async def cmd_create_profile(message: types.Message):
    await message.delete()
    await MyStatesGroup.photo.set()
    await message.answer(text="–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ  üì∏",
                         reply_markup=get_cancel_kb())


@my_disp.message_handler(lambda message: not message.photo, state=MyStatesGroup.photo)
async def check_photo(message: types.Message):
    await message.reply("‚õîÔ∏è –≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ! –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ")


@my_disp.message_handler(lambda message: message.photo, content_types="photo", state=MyStatesGroup.photo)
async def fill_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["photo"] = message.photo[0].file_id

    await MyStatesGroup.next()
    await message.answer(text="–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ –∏–º—è üó£")


@my_disp.message_handler(lambda message: message.text, content_types="text", state=MyStatesGroup.name)
async def fill_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["name"] = message.text

    await MyStatesGroup.next()
    await message.answer(text="–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç üîû\n–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç–∞—Ä–Ω–µ 18 –∏ –º–ª–∞–¥—à–µ 90 ‚õîÔ∏è")


@my_disp.message_handler(content_types=ContentTypes.ANY, state=MyStatesGroup.name)
async def check_name(message: types.Message):
    await message.reply(text="‚õîÔ∏è –≠—Ç–æ –Ω–µ –∏–º—è! –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ –∏–º—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")


@my_disp.message_handler(lambda message: not message.text.isdigit() or not (18 <= float(message.text) <= 90),
                         state=MyStatesGroup.age)
async def check_age(message: types.Message):
    await message.reply(text="‚õîÔ∏è –≠—Ç–æ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç! –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç")


@my_disp.message_handler(lambda message: message.text.isdigit, content_types="text", state=MyStatesGroup.age)
async def fill_age(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["age"] = int(message.text)

    await MyStatesGroup.next()
    await message.answer(text="–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ üîû\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–±–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 50 –∑–Ω–∞–∫–æ–≤, "
                              "–Ω–æ –Ω–µ –±–æ–ª–µ–µ 1000 ‚õîÔ∏è")


@my_disp.message_handler(lambda message: 50 <= len(message.text) <= 1000,
                         content_types=ContentTypes.TEXT,
                         state=MyStatesGroup.description)
async def fill_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["description"] = message.text

    await state.finish()
    await message.answer(text="–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n")
    await my_bot.send_photo(chat_id=message.chat.id,
                            photo=data["photo"],
                            caption=f"–ò–º—è: {data['name']}\n–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n–û —Å–µ–±–µ: {data['description']}")


@my_disp.message_handler(content_types=ContentTypes.ANY,
                         state=MyStatesGroup.description)
async def check_description(message: types.Message):
    await message.reply(text="‚õîÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º! –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")


if __name__ == "__main__":
    executor.start_polling(dispatcher=my_disp,
                           skip_updates=True,
                           on_startup=on_startup)
